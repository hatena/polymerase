// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: polypb/metadata.proto

/*
	Package polypb is a generated protocol buffer package.

	It is generated from these files:
		polypb/metadata.proto

	It has these top-level messages:
		DiskMeta
		NodeMeta
		BackupMeta
		XtrabackupMeta
		MysqldumpMeta
		XtrabackupCheckpoints
*/
package polypb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/gogo/protobuf/gogoproto"

import time "time"

import bytes "bytes"

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// StorageType
type StorageType int32

const (
	StorageType_LOCAL_DISK StorageType = 0
	StorageType_LOCAL_MEM  StorageType = 1
)

var StorageType_name = map[int32]string{
	0: "LOCAL_DISK",
	1: "LOCAL_MEM",
}
var StorageType_value = map[string]int32{
	"LOCAL_DISK": 0,
	"LOCAL_MEM":  1,
}

func (x StorageType) String() string {
	return proto.EnumName(StorageType_name, int32(x))
}
func (StorageType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMetadata, []int{0} }

// BackupType
type BackupType int32

const (
	BackupType_XTRABACKUP_FULL BackupType = 0
	BackupType_XTRABACKUP_INC  BackupType = 1
	BackupType_MYSQLDUMP       BackupType = 2
)

var BackupType_name = map[int32]string{
	0: "XTRABACKUP_FULL",
	1: "XTRABACKUP_INC",
	2: "MYSQLDUMP",
}
var BackupType_value = map[string]int32{
	"XTRABACKUP_FULL": 0,
	"XTRABACKUP_INC":  1,
	"MYSQLDUMP":       2,
}

func (x BackupType) String() string {
	return proto.EnumName(BackupType_name, int32(x))
}
func (BackupType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMetadata, []int{1} }

// DiskMeta is a metadata about a disk.
type DiskMeta struct {
	Total uint64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Avail uint64 `protobuf:"varint,2,opt,name=avail,proto3" json:"avail,omitempty"`
}

func (m *DiskMeta) Reset()                    { *m = DiskMeta{} }
func (m *DiskMeta) String() string            { return proto.CompactTextString(m) }
func (*DiskMeta) ProtoMessage()               {}
func (*DiskMeta) Descriptor() ([]byte, []int) { return fileDescriptorMetadata, []int{0} }

func (m *DiskMeta) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *DiskMeta) GetAvail() uint64 {
	if m != nil {
		return m.Avail
	}
	return 0
}

// NodeMeta is a metadata about a node.
type NodeMeta struct {
	Disk     *DiskMeta `protobuf:"bytes,1,opt,name=disk" json:"disk,omitempty"`
	Addr     string    `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	StoreDir string    `protobuf:"bytes,3,opt,name=store_dir,json=storeDir,proto3" json:"store_dir,omitempty"`
	NodeId   NodeID    `protobuf:"bytes,4,opt,name=node_id,json=nodeId,proto3,casttype=NodeID" json:"node_id,omitempty"`
}

func (m *NodeMeta) Reset()                    { *m = NodeMeta{} }
func (m *NodeMeta) String() string            { return proto.CompactTextString(m) }
func (*NodeMeta) ProtoMessage()               {}
func (*NodeMeta) Descriptor() ([]byte, []int) { return fileDescriptorMetadata, []int{1} }

func (m *NodeMeta) GetDisk() *DiskMeta {
	if m != nil {
		return m.Disk
	}
	return nil
}

func (m *NodeMeta) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *NodeMeta) GetStoreDir() string {
	if m != nil {
		return m.StoreDir
	}
	return ""
}

func (m *NodeMeta) GetNodeId() NodeID {
	if m != nil {
		return m.NodeId
	}
	return nil
}

// BackupMeta is a metadata about a backup file.
type BackupMeta struct {
	StoredTime  *time.Time  `protobuf:"bytes,1,opt,name=stored_time,json=storedTime,stdtime" json:"stored_time,omitempty"`
	NodeId      NodeID      `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3,casttype=NodeID" json:"node_id,omitempty"`
	Host        string      `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	StorageType StorageType `protobuf:"varint,4,opt,name=storage_type,json=storageType,proto3,enum=polypb.StorageType" json:"storage_type,omitempty"`
	EndTime     *time.Time  `protobuf:"bytes,5,opt,name=end_time,json=endTime,stdtime" json:"end_time,omitempty"`
	FileSize    int64       `protobuf:"varint,6,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	BackupType  BackupType  `protobuf:"varint,7,opt,name=backup_type,json=backupType,proto3,enum=polypb.BackupType" json:"backup_type,omitempty"`
	Db          DatabaseID  `protobuf:"bytes,8,opt,name=db,proto3,casttype=DatabaseID" json:"db,omitempty"`
	//  string to_lsn = 9;
	Key           Key       `protobuf:"bytes,10,opt,name=key,proto3,casttype=Key" json:"key,omitempty"`
	BaseTimePoint TimePoint `protobuf:"bytes,11,opt,name=base_time_point,json=baseTimePoint,proto3,casttype=TimePoint" json:"base_time_point,omitempty"`
	// Types that are valid to be assigned to Details:
	//	*BackupMeta_XtrabackupMeta
	//	*BackupMeta_MysqldumpMeta
	Details isBackupMeta_Details `protobuf_oneof:"details"`
}

func (m *BackupMeta) Reset()                    { *m = BackupMeta{} }
func (m *BackupMeta) String() string            { return proto.CompactTextString(m) }
func (*BackupMeta) ProtoMessage()               {}
func (*BackupMeta) Descriptor() ([]byte, []int) { return fileDescriptorMetadata, []int{2} }

type isBackupMeta_Details interface {
	isBackupMeta_Details()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type BackupMeta_XtrabackupMeta struct {
	XtrabackupMeta *XtrabackupMeta `protobuf:"bytes,12,opt,name=xtrabackup_meta,json=xtrabackupMeta,oneof"`
}
type BackupMeta_MysqldumpMeta struct {
	MysqldumpMeta *MysqldumpMeta `protobuf:"bytes,13,opt,name=mysqldump_meta,json=mysqldumpMeta,oneof"`
}

func (*BackupMeta_XtrabackupMeta) isBackupMeta_Details() {}
func (*BackupMeta_MysqldumpMeta) isBackupMeta_Details()  {}

func (m *BackupMeta) GetDetails() isBackupMeta_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *BackupMeta) GetStoredTime() *time.Time {
	if m != nil {
		return m.StoredTime
	}
	return nil
}

func (m *BackupMeta) GetNodeId() NodeID {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *BackupMeta) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *BackupMeta) GetStorageType() StorageType {
	if m != nil {
		return m.StorageType
	}
	return StorageType_LOCAL_DISK
}

func (m *BackupMeta) GetEndTime() *time.Time {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *BackupMeta) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *BackupMeta) GetBackupType() BackupType {
	if m != nil {
		return m.BackupType
	}
	return BackupType_XTRABACKUP_FULL
}

func (m *BackupMeta) GetDb() DatabaseID {
	if m != nil {
		return m.Db
	}
	return nil
}

func (m *BackupMeta) GetKey() Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *BackupMeta) GetBaseTimePoint() TimePoint {
	if m != nil {
		return m.BaseTimePoint
	}
	return nil
}

func (m *BackupMeta) GetXtrabackupMeta() *XtrabackupMeta {
	if x, ok := m.GetDetails().(*BackupMeta_XtrabackupMeta); ok {
		return x.XtrabackupMeta
	}
	return nil
}

func (m *BackupMeta) GetMysqldumpMeta() *MysqldumpMeta {
	if x, ok := m.GetDetails().(*BackupMeta_MysqldumpMeta); ok {
		return x.MysqldumpMeta
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BackupMeta) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BackupMeta_OneofMarshaler, _BackupMeta_OneofUnmarshaler, _BackupMeta_OneofSizer, []interface{}{
		(*BackupMeta_XtrabackupMeta)(nil),
		(*BackupMeta_MysqldumpMeta)(nil),
	}
}

func _BackupMeta_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BackupMeta)
	// details
	switch x := m.Details.(type) {
	case *BackupMeta_XtrabackupMeta:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.XtrabackupMeta); err != nil {
			return err
		}
	case *BackupMeta_MysqldumpMeta:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MysqldumpMeta); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("BackupMeta.Details has unexpected type %T", x)
	}
	return nil
}

func _BackupMeta_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BackupMeta)
	switch tag {
	case 12: // details.xtrabackup_meta
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(XtrabackupMeta)
		err := b.DecodeMessage(msg)
		m.Details = &BackupMeta_XtrabackupMeta{msg}
		return true, err
	case 13: // details.mysqldump_meta
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MysqldumpMeta)
		err := b.DecodeMessage(msg)
		m.Details = &BackupMeta_MysqldumpMeta{msg}
		return true, err
	default:
		return false, nil
	}
}

func _BackupMeta_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BackupMeta)
	// details
	switch x := m.Details.(type) {
	case *BackupMeta_XtrabackupMeta:
		s := proto.Size(x.XtrabackupMeta)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *BackupMeta_MysqldumpMeta:
		s := proto.Size(x.MysqldumpMeta)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type XtrabackupMeta struct {
	Checkpoints *XtrabackupCheckpoints `protobuf:"bytes,1,opt,name=checkpoints" json:"checkpoints,omitempty"`
}

func (m *XtrabackupMeta) Reset()                    { *m = XtrabackupMeta{} }
func (m *XtrabackupMeta) String() string            { return proto.CompactTextString(m) }
func (*XtrabackupMeta) ProtoMessage()               {}
func (*XtrabackupMeta) Descriptor() ([]byte, []int) { return fileDescriptorMetadata, []int{3} }

func (m *XtrabackupMeta) GetCheckpoints() *XtrabackupCheckpoints {
	if m != nil {
		return m.Checkpoints
	}
	return nil
}

type MysqldumpMeta struct {
}

func (m *MysqldumpMeta) Reset()                    { *m = MysqldumpMeta{} }
func (m *MysqldumpMeta) String() string            { return proto.CompactTextString(m) }
func (*MysqldumpMeta) ProtoMessage()               {}
func (*MysqldumpMeta) Descriptor() ([]byte, []int) { return fileDescriptorMetadata, []int{4} }

type XtrabackupCheckpoints struct {
	BackupType        string `protobuf:"bytes,1,opt,name=backup_type,json=backupType,proto3" json:"backup_type,omitempty" ini:"backup_type"`
	FromLsn           string `protobuf:"bytes,2,opt,name=from_lsn,json=fromLsn,proto3" json:"from_lsn,omitempty" ini:"from_lsn"`
	ToLsn             string `protobuf:"bytes,3,opt,name=to_lsn,json=toLsn,proto3" json:"to_lsn,omitempty" ini:"to_lsn"`
	LastLsn           string `protobuf:"bytes,4,opt,name=last_lsn,json=lastLsn,proto3" json:"last_lsn,omitempty" ini:"last_lsn"`
	Compact           int32  `protobuf:"varint,5,opt,name=compact,proto3" json:"compact,omitempty" ini:"compact"`
	RecoverBinlogInfo int32  `protobuf:"varint,6,opt,name=recover_binlog_info,json=recoverBinlogInfo,proto3" json:"recover_binlog_info,omitempty" ini:"recover_binlog_info"`
}

func (m *XtrabackupCheckpoints) Reset()                    { *m = XtrabackupCheckpoints{} }
func (m *XtrabackupCheckpoints) String() string            { return proto.CompactTextString(m) }
func (*XtrabackupCheckpoints) ProtoMessage()               {}
func (*XtrabackupCheckpoints) Descriptor() ([]byte, []int) { return fileDescriptorMetadata, []int{5} }

func (m *XtrabackupCheckpoints) GetBackupType() string {
	if m != nil {
		return m.BackupType
	}
	return ""
}

func (m *XtrabackupCheckpoints) GetFromLsn() string {
	if m != nil {
		return m.FromLsn
	}
	return ""
}

func (m *XtrabackupCheckpoints) GetToLsn() string {
	if m != nil {
		return m.ToLsn
	}
	return ""
}

func (m *XtrabackupCheckpoints) GetLastLsn() string {
	if m != nil {
		return m.LastLsn
	}
	return ""
}

func (m *XtrabackupCheckpoints) GetCompact() int32 {
	if m != nil {
		return m.Compact
	}
	return 0
}

func (m *XtrabackupCheckpoints) GetRecoverBinlogInfo() int32 {
	if m != nil {
		return m.RecoverBinlogInfo
	}
	return 0
}

func init() {
	proto.RegisterType((*DiskMeta)(nil), "polypb.DiskMeta")
	proto.RegisterType((*NodeMeta)(nil), "polypb.NodeMeta")
	proto.RegisterType((*BackupMeta)(nil), "polypb.BackupMeta")
	proto.RegisterType((*XtrabackupMeta)(nil), "polypb.XtrabackupMeta")
	proto.RegisterType((*MysqldumpMeta)(nil), "polypb.MysqldumpMeta")
	proto.RegisterType((*XtrabackupCheckpoints)(nil), "polypb.XtrabackupCheckpoints")
	proto.RegisterEnum("polypb.StorageType", StorageType_name, StorageType_value)
	proto.RegisterEnum("polypb.BackupType", BackupType_name, BackupType_value)
}
func (this *DiskMeta) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*DiskMeta)
	if !ok {
		that2, ok := that.(DiskMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	if this.Avail != that1.Avail {
		return false
	}
	return true
}
func (this *NodeMeta) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*NodeMeta)
	if !ok {
		that2, ok := that.(NodeMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Disk.Equal(that1.Disk) {
		return false
	}
	if this.Addr != that1.Addr {
		return false
	}
	if this.StoreDir != that1.StoreDir {
		return false
	}
	if !bytes.Equal(this.NodeId, that1.NodeId) {
		return false
	}
	return true
}
func (this *BackupMeta) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BackupMeta)
	if !ok {
		that2, ok := that.(BackupMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if that1.StoredTime == nil {
		if this.StoredTime != nil {
			return false
		}
	} else if !this.StoredTime.Equal(*that1.StoredTime) {
		return false
	}
	if !bytes.Equal(this.NodeId, that1.NodeId) {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.StorageType != that1.StorageType {
		return false
	}
	if that1.EndTime == nil {
		if this.EndTime != nil {
			return false
		}
	} else if !this.EndTime.Equal(*that1.EndTime) {
		return false
	}
	if this.FileSize != that1.FileSize {
		return false
	}
	if this.BackupType != that1.BackupType {
		return false
	}
	if !bytes.Equal(this.Db, that1.Db) {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	if !bytes.Equal(this.BaseTimePoint, that1.BaseTimePoint) {
		return false
	}
	if that1.Details == nil {
		if this.Details != nil {
			return false
		}
	} else if this.Details == nil {
		return false
	} else if !this.Details.Equal(that1.Details) {
		return false
	}
	return true
}
func (this *BackupMeta_XtrabackupMeta) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BackupMeta_XtrabackupMeta)
	if !ok {
		that2, ok := that.(BackupMeta_XtrabackupMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.XtrabackupMeta.Equal(that1.XtrabackupMeta) {
		return false
	}
	return true
}
func (this *BackupMeta_MysqldumpMeta) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BackupMeta_MysqldumpMeta)
	if !ok {
		that2, ok := that.(BackupMeta_MysqldumpMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.MysqldumpMeta.Equal(that1.MysqldumpMeta) {
		return false
	}
	return true
}
func (this *XtrabackupMeta) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*XtrabackupMeta)
	if !ok {
		that2, ok := that.(XtrabackupMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !this.Checkpoints.Equal(that1.Checkpoints) {
		return false
	}
	return true
}
func (this *MysqldumpMeta) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*MysqldumpMeta)
	if !ok {
		that2, ok := that.(MysqldumpMeta)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	return true
}
func (this *XtrabackupCheckpoints) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*XtrabackupCheckpoints)
	if !ok {
		that2, ok := that.(XtrabackupCheckpoints)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.BackupType != that1.BackupType {
		return false
	}
	if this.FromLsn != that1.FromLsn {
		return false
	}
	if this.ToLsn != that1.ToLsn {
		return false
	}
	if this.LastLsn != that1.LastLsn {
		return false
	}
	if this.Compact != that1.Compact {
		return false
	}
	if this.RecoverBinlogInfo != that1.RecoverBinlogInfo {
		return false
	}
	return true
}
func (m *DiskMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiskMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(m.Total))
	}
	if m.Avail != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(m.Avail))
	}
	return i, nil
}

func (m *NodeMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Disk != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(m.Disk.Size()))
		n1, err := m.Disk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Addr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if len(m.StoreDir) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.StoreDir)))
		i += copy(dAtA[i:], m.StoreDir)
	}
	if len(m.NodeId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.NodeId)))
		i += copy(dAtA[i:], m.NodeId)
	}
	return i, nil
}

func (m *BackupMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StoredTime != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.StoredTime)))
		n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StoredTime, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.NodeId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.NodeId)))
		i += copy(dAtA[i:], m.NodeId)
	}
	if len(m.Host) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if m.StorageType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(m.StorageType))
	}
	if m.EndTime != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndTime)))
		n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EndTime, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.FileSize != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(m.FileSize))
	}
	if m.BackupType != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(m.BackupType))
	}
	if len(m.Db) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Db)))
		i += copy(dAtA[i:], m.Db)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.BaseTimePoint) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.BaseTimePoint)))
		i += copy(dAtA[i:], m.BaseTimePoint)
	}
	if m.Details != nil {
		nn4, err := m.Details.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn4
	}
	return i, nil
}

func (m *BackupMeta_XtrabackupMeta) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.XtrabackupMeta != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(m.XtrabackupMeta.Size()))
		n5, err := m.XtrabackupMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *BackupMeta_MysqldumpMeta) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MysqldumpMeta != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(m.MysqldumpMeta.Size()))
		n6, err := m.MysqldumpMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *XtrabackupMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XtrabackupMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Checkpoints != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(m.Checkpoints.Size()))
		n7, err := m.Checkpoints.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *MysqldumpMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MysqldumpMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *XtrabackupCheckpoints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XtrabackupCheckpoints) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.BackupType) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.BackupType)))
		i += copy(dAtA[i:], m.BackupType)
	}
	if len(m.FromLsn) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.FromLsn)))
		i += copy(dAtA[i:], m.FromLsn)
	}
	if len(m.ToLsn) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.ToLsn)))
		i += copy(dAtA[i:], m.ToLsn)
	}
	if len(m.LastLsn) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(len(m.LastLsn)))
		i += copy(dAtA[i:], m.LastLsn)
	}
	if m.Compact != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(m.Compact))
	}
	if m.RecoverBinlogInfo != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMetadata(dAtA, i, uint64(m.RecoverBinlogInfo))
	}
	return i, nil
}

func encodeVarintMetadata(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DiskMeta) Size() (n int) {
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovMetadata(uint64(m.Total))
	}
	if m.Avail != 0 {
		n += 1 + sovMetadata(uint64(m.Avail))
	}
	return n
}

func (m *NodeMeta) Size() (n int) {
	var l int
	_ = l
	if m.Disk != nil {
		l = m.Disk.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.StoreDir)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *BackupMeta) Size() (n int) {
	var l int
	_ = l
	if m.StoredTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StoredTime)
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.StorageType != 0 {
		n += 1 + sovMetadata(uint64(m.StorageType))
	}
	if m.EndTime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndTime)
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovMetadata(uint64(m.FileSize))
	}
	if m.BackupType != 0 {
		n += 1 + sovMetadata(uint64(m.BackupType))
	}
	l = len(m.Db)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.BaseTimePoint)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Details != nil {
		n += m.Details.Size()
	}
	return n
}

func (m *BackupMeta_XtrabackupMeta) Size() (n int) {
	var l int
	_ = l
	if m.XtrabackupMeta != nil {
		l = m.XtrabackupMeta.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}
func (m *BackupMeta_MysqldumpMeta) Size() (n int) {
	var l int
	_ = l
	if m.MysqldumpMeta != nil {
		l = m.MysqldumpMeta.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}
func (m *XtrabackupMeta) Size() (n int) {
	var l int
	_ = l
	if m.Checkpoints != nil {
		l = m.Checkpoints.Size()
		n += 1 + l + sovMetadata(uint64(l))
	}
	return n
}

func (m *MysqldumpMeta) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *XtrabackupCheckpoints) Size() (n int) {
	var l int
	_ = l
	l = len(m.BackupType)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.FromLsn)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.ToLsn)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	l = len(m.LastLsn)
	if l > 0 {
		n += 1 + l + sovMetadata(uint64(l))
	}
	if m.Compact != 0 {
		n += 1 + sovMetadata(uint64(m.Compact))
	}
	if m.RecoverBinlogInfo != 0 {
		n += 1 + sovMetadata(uint64(m.RecoverBinlogInfo))
	}
	return n
}

func sovMetadata(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMetadata(x uint64) (n int) {
	return sovMetadata(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DiskMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiskMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiskMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avail", wireType)
			}
			m.Avail = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Avail |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Disk == nil {
				m.Disk = &DiskMeta{}
			}
			if err := m.Disk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreDir", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreDir = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = append(m.NodeId[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeId == nil {
				m.NodeId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoredTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StoredTime == nil {
				m.StoredTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StoredTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = append(m.NodeId[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeId == nil {
				m.NodeId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageType", wireType)
			}
			m.StorageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageType |= (StorageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupType", wireType)
			}
			m.BackupType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackupType |= (BackupType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Db", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Db = append(m.Db[:0], dAtA[iNdEx:postIndex]...)
			if m.Db == nil {
				m.Db = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTimePoint", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseTimePoint = append(m.BaseTimePoint[:0], dAtA[iNdEx:postIndex]...)
			if m.BaseTimePoint == nil {
				m.BaseTimePoint = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XtrabackupMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &XtrabackupMeta{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Details = &BackupMeta_XtrabackupMeta{v}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MysqldumpMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MysqldumpMeta{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Details = &BackupMeta_MysqldumpMeta{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XtrabackupMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XtrabackupMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XtrabackupMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Checkpoints == nil {
				m.Checkpoints = &XtrabackupCheckpoints{}
			}
			if err := m.Checkpoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MysqldumpMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MysqldumpMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MysqldumpMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XtrabackupCheckpoints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XtrabackupCheckpoints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XtrabackupCheckpoints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BackupType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromLsn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromLsn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToLsn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToLsn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLsn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMetadata
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastLsn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compact", wireType)
			}
			m.Compact = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Compact |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoverBinlogInfo", wireType)
			}
			m.RecoverBinlogInfo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecoverBinlogInfo |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMetadata(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMetadata
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMetadata(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMetadata
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMetadata
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMetadata
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMetadata
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMetadata(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMetadata = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMetadata   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("polypb/metadata.proto", fileDescriptorMetadata) }

var fileDescriptorMetadata = []byte{
	// 830 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x6e, 0xe3, 0x54,
	0x10, 0xae, 0xd3, 0x34, 0x3f, 0x93, 0x26, 0x4d, 0x4f, 0xb7, 0xc8, 0xdb, 0xd5, 0xc6, 0x95, 0x41,
	0xa2, 0x5a, 0x68, 0x2a, 0xed, 0x8a, 0x5e, 0x80, 0x04, 0x8a, 0x1b, 0x10, 0x51, 0x93, 0xa5, 0xeb,
	0xb6, 0xd2, 0x72, 0x65, 0x1d, 0xc7, 0x27, 0xe9, 0x51, 0x6c, 0x1f, 0x63, 0x9f, 0xae, 0x36, 0xfb,
	0x00, 0x5c, 0x73, 0xc9, 0x23, 0xf0, 0x28, 0xdc, 0x81, 0x78, 0x00, 0x83, 0xca, 0x1b, 0xe4, 0xb2,
	0x57, 0xe8, 0x8c, 0xed, 0x36, 0x81, 0x22, 0xed, 0xdd, 0xcc, 0x37, 0xdf, 0xcc, 0x7c, 0x33, 0x9e,
	0x63, 0xd8, 0x8d, 0x84, 0x3f, 0x8f, 0xdc, 0xa3, 0x80, 0x49, 0xea, 0x51, 0x49, 0xbb, 0x51, 0x2c,
	0xa4, 0x20, 0x95, 0x0c, 0xde, 0x33, 0xa6, 0x42, 0x4c, 0x7d, 0x76, 0x84, 0xa8, 0x7b, 0x3d, 0x39,
	0x92, 0x3c, 0x60, 0x89, 0xa4, 0x41, 0x94, 0x11, 0xf7, 0x0e, 0xa7, 0x5c, 0x5e, 0x5d, 0xbb, 0xdd,
	0xb1, 0x08, 0x8e, 0xa6, 0x62, 0x2a, 0xee, 0x99, 0xca, 0x43, 0x07, 0xad, 0x8c, 0x6e, 0x1e, 0x43,
	0xad, 0xcf, 0x93, 0xd9, 0x88, 0x49, 0x4a, 0x1e, 0xc1, 0x86, 0x14, 0x92, 0xfa, 0xba, 0xb6, 0xaf,
	0x1d, 0x94, 0xed, 0xcc, 0x51, 0x28, 0x7d, 0x43, 0xb9, 0xaf, 0x97, 0x32, 0x14, 0x1d, 0xf3, 0x47,
	0x0d, 0x6a, 0x2f, 0x85, 0xc7, 0x30, 0xf1, 0x23, 0x28, 0x7b, 0x3c, 0x99, 0x61, 0x5e, 0xe3, 0x79,
	0xbb, 0x9b, 0x69, 0xed, 0x16, 0x85, 0x6d, 0x8c, 0x12, 0x02, 0x65, 0xea, 0x79, 0x31, 0xd6, 0xa9,
	0xdb, 0x68, 0x93, 0x27, 0x50, 0x4f, 0xa4, 0x88, 0x99, 0xe3, 0xf1, 0x58, 0x5f, 0xc7, 0x40, 0x0d,
	0x81, 0x3e, 0x8f, 0xc9, 0x87, 0x50, 0x0d, 0x85, 0xc7, 0x1c, 0xee, 0xe9, 0xe5, 0x7d, 0xed, 0x60,
	0xd3, 0x82, 0xdb, 0xd4, 0xa8, 0xa8, 0xae, 0x83, 0xbe, 0x5d, 0x51, 0xa1, 0x81, 0x67, 0xfe, 0x56,
	0x06, 0xb0, 0xe8, 0x78, 0x76, 0x1d, 0xa1, 0x94, 0x1e, 0x34, 0x30, 0xdf, 0x73, 0xd4, 0x62, 0x72,
	0x45, 0x7b, 0xdd, 0x6c, 0x6b, 0xdd, 0x62, 0x17, 0xdd, 0x8b, 0x62, 0x6b, 0x56, 0xf9, 0xa7, 0x3f,
	0x0d, 0xcd, 0x86, 0x2c, 0x49, 0xc1, 0xcb, 0x6d, 0x4b, 0xff, 0xd7, 0x56, 0x0d, 0x73, 0x25, 0x12,
	0x99, 0x6b, 0x46, 0x9b, 0x1c, 0xc3, 0xa6, 0x2a, 0x43, 0xa7, 0xcc, 0x91, 0xf3, 0x88, 0xa1, 0xe8,
	0xd6, 0xf3, 0x9d, 0x62, 0x1d, 0xe7, 0x59, 0xec, 0x62, 0x1e, 0x31, 0xbb, 0x91, 0xdc, 0x3b, 0xe4,
	0x0b, 0xa8, 0xb1, 0x30, 0x17, 0xbc, 0xf1, 0x9e, 0x82, 0xab, 0x2c, 0xcc, 0xd4, 0x3e, 0x81, 0xfa,
	0x84, 0xfb, 0xcc, 0x49, 0xf8, 0x3b, 0xa6, 0x57, 0xf6, 0xb5, 0x83, 0x75, 0xbb, 0xa6, 0x80, 0x73,
	0xfe, 0x8e, 0x91, 0x17, 0xd0, 0x70, 0x71, 0x37, 0x99, 0xa0, 0x2a, 0x0a, 0x22, 0x85, 0xa0, 0x6c,
	0x6d, 0xa8, 0x07, 0xdc, 0x3b, 0x9b, 0x74, 0xa0, 0xe4, 0xb9, 0x7a, 0x0d, 0x47, 0x6f, 0xdd, 0xa6,
	0x06, 0xf4, 0xa9, 0xa4, 0x2e, 0x4d, 0xd4, 0xf8, 0x25, 0xcf, 0x25, 0x8f, 0x61, 0x7d, 0xc6, 0xe6,
	0x3a, 0x20, 0xa1, 0x7a, 0x9b, 0x1a, 0xeb, 0xa7, 0x6c, 0x6e, 0x2b, 0x8c, 0x7c, 0x06, 0x5b, 0x8a,
	0x88, 0xa3, 0x38, 0x91, 0xe0, 0xa1, 0xd4, 0x1b, 0x48, 0x6b, 0xde, 0xa6, 0x46, 0x5d, 0xe9, 0x3d,
	0x53, 0xa0, 0xdd, 0x54, 0xac, 0x3b, 0x97, 0xf4, 0x60, 0xeb, 0xad, 0x8c, 0x69, 0x2e, 0x55, 0x5d,
	0xbe, 0xbe, 0x89, 0x7b, 0xf8, 0xa0, 0x90, 0xfa, 0xfa, 0x2e, 0xac, 0xbe, 0xf2, 0xb7, 0x6b, 0x76,
	0xeb, 0xed, 0x0a, 0x42, 0xbe, 0x84, 0x56, 0x30, 0x4f, 0x7e, 0xf0, 0xbd, 0xeb, 0x20, 0xaf, 0xd0,
	0xc4, 0x0a, 0xbb, 0x45, 0x85, 0x51, 0x11, 0xcd, 0x0b, 0x34, 0x83, 0x65, 0xc0, 0xaa, 0x43, 0xd5,
	0x63, 0x92, 0x72, 0x3f, 0x31, 0x5f, 0x41, 0x6b, 0xb5, 0x1d, 0xf9, 0x0a, 0x1a, 0xe3, 0x2b, 0x36,
	0x9e, 0xe1, 0x44, 0x49, 0x7e, 0x54, 0x4f, 0xff, 0xab, 0xed, 0xe4, 0x9e, 0x64, 0x2f, 0x67, 0x98,
	0x5b, 0xd0, 0x5c, 0xe9, 0x6f, 0xfe, 0x51, 0x82, 0xdd, 0x07, 0xf3, 0xc8, 0xf1, 0xea, 0x27, 0x53,
	0xbd, 0xea, 0xd6, 0xee, 0x22, 0x35, 0xb6, 0x79, 0xc8, 0x3f, 0x37, 0x97, 0x62, 0xe6, 0xca, 0x57,
	0x3b, 0x84, 0xda, 0x24, 0x16, 0x81, 0xe3, 0x27, 0x61, 0xf6, 0xc2, 0x2c, 0xb2, 0x48, 0x8d, 0x16,
	0x26, 0x15, 0x01, 0xd3, 0xae, 0x2a, 0x73, 0x98, 0x84, 0xe4, 0x63, 0xa8, 0x48, 0x81, 0x64, 0xbc,
	0x60, 0xab, 0xbd, 0x48, 0x8d, 0x4d, 0x24, 0x67, 0xb0, 0xa9, 0x9e, 0xbf, 0x22, 0x1e, 0x42, 0xcd,
	0xa7, 0x89, 0x44, 0x6a, 0xf9, 0x5f, 0x75, 0x8b, 0x80, 0x69, 0x57, 0x95, 0xa9, 0xe8, 0x9f, 0x40,
	0x75, 0x2c, 0x82, 0x88, 0x8e, 0x25, 0x9e, 0xf2, 0x86, 0xb5, 0xbd, 0x48, 0x8d, 0x26, 0xb2, 0x73,
	0xdc, 0xb4, 0x0b, 0x06, 0x19, 0xc1, 0x4e, 0xcc, 0xc6, 0xe2, 0x0d, 0x8b, 0x1d, 0x97, 0x87, 0xbe,
	0x98, 0x3a, 0x3c, 0x9c, 0x08, 0xbc, 0xe2, 0x0d, 0xeb, 0xe9, 0x22, 0x35, 0x1e, 0x63, 0xe2, 0x03,
	0x1c, 0xd3, 0xde, 0xce, 0x51, 0x0b, 0xc1, 0x41, 0x38, 0x11, 0xcf, 0x3e, 0x85, 0xc6, 0xd2, 0x1b,
	0x23, 0x2d, 0x80, 0xe1, 0x77, 0x27, 0xbd, 0xa1, 0xd3, 0x1f, 0x9c, 0x9f, 0xb6, 0xd7, 0x48, 0x13,
	0xea, 0x99, 0x3f, 0xfa, 0x7a, 0xd4, 0xd6, 0x9e, 0xf5, 0x8b, 0xff, 0x06, 0x92, 0x77, 0x60, 0xeb,
	0xf5, 0x85, 0xdd, 0xb3, 0x7a, 0x27, 0xa7, 0x97, 0x67, 0xce, 0x37, 0x97, 0xc3, 0x61, 0x7b, 0x8d,
	0x10, 0x68, 0x2d, 0x81, 0x83, 0x97, 0x27, 0x6d, 0x4d, 0x55, 0x19, 0x7d, 0x7f, 0xfe, 0x6a, 0xd8,
	0xbf, 0x1c, 0x9d, 0xb5, 0x4b, 0xd6, 0xa3, 0x5f, 0x6e, 0x3a, 0xda, 0xaf, 0x37, 0x1d, 0xed, 0xf7,
	0x9b, 0x8e, 0xf6, 0xd7, 0x4d, 0x47, 0xfb, 0xf9, 0xef, 0xce, 0x9a, 0x5b, 0xc1, 0x77, 0xfb, 0xe2,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x22, 0xa2, 0xa7, 0xcd, 0x05, 0x00, 0x00,
}
