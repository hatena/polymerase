// Automatically generated by MockGen. DO NOT EDIT!
// Source: pkg/storage/storage.go

package storage

import (
	io "io"
	time "time"

	clientv3 "github.com/coreos/etcd/clientv3"
	gomock "github.com/golang/mock/gomock"
	storagepb "github.com/taku-k/polymerase/pkg/storage/storagepb"
)

// Mock of BackupStorage interface
type MockBackupStorage struct {
	ctrl     *gomock.Controller
	recorder *_MockBackupStorageRecorder
}

// Recorder for MockBackupStorage (not exported)
type _MockBackupStorageRecorder struct {
	mock *MockBackupStorage
}

func NewMockBackupStorage(ctrl *gomock.Controller) *MockBackupStorage {
	mock := &MockBackupStorage{ctrl: ctrl}
	mock.recorder = &_MockBackupStorageRecorder{mock}
	return mock
}

func (_m *MockBackupStorage) EXPECT() *_MockBackupStorageRecorder {
	return _m.recorder
}

func (_m *MockBackupStorage) GetStorageType() string {
	ret := _m.ctrl.Call(_m, "GetStorageType")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockBackupStorageRecorder) GetStorageType() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetStorageType")
}

func (_m *MockBackupStorage) GetLatestToLSN(db string) (string, error) {
	ret := _m.ctrl.Call(_m, "GetLatestToLSN", db)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBackupStorageRecorder) GetLatestToLSN(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLatestToLSN", arg0)
}

func (_m *MockBackupStorage) SearchStaringPointByLSN(db string, lsn string) (string, error) {
	ret := _m.ctrl.Call(_m, "SearchStaringPointByLSN", db, lsn)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBackupStorageRecorder) SearchStaringPointByLSN(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SearchStaringPointByLSN", arg0, arg1)
}

func (_m *MockBackupStorage) TransferTempFullBackup(tempDir string, key string) error {
	ret := _m.ctrl.Call(_m, "TransferTempFullBackup", tempDir, key)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBackupStorageRecorder) TransferTempFullBackup(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TransferTempFullBackup", arg0, arg1)
}

func (_m *MockBackupStorage) TransferTempIncBackup(tempDir string, key string) error {
	ret := _m.ctrl.Call(_m, "TransferTempIncBackup", tempDir, key)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBackupStorageRecorder) TransferTempIncBackup(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TransferTempIncBackup", arg0, arg1)
}

func (_m *MockBackupStorage) SearchConsecutiveIncBackups(db string, from time.Time) ([]*storagepb.BackupFileInfo, error) {
	ret := _m.ctrl.Call(_m, "SearchConsecutiveIncBackups", db, from)
	ret0, _ := ret[0].([]*storagepb.BackupFileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBackupStorageRecorder) SearchConsecutiveIncBackups(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SearchConsecutiveIncBackups", arg0, arg1)
}

func (_m *MockBackupStorage) GetFileStream(key string) (io.Reader, error) {
	ret := _m.ctrl.Call(_m, "GetFileStream", key)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBackupStorageRecorder) GetFileStream(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFileStream", arg0)
}

func (_m *MockBackupStorage) PostFile(key string, name string, r io.Reader) error {
	ret := _m.ctrl.Call(_m, "PostFile", key, name, r)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBackupStorageRecorder) PostFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PostFile", arg0, arg1, arg2)
}

func (_m *MockBackupStorage) RemoveBackups(key string) error {
	ret := _m.ctrl.Call(_m, "RemoveBackups", key)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBackupStorageRecorder) RemoveBackups(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveBackups", arg0)
}

func (_m *MockBackupStorage) GetKPastBackupKey(db string, k int) (string, error) {
	ret := _m.ctrl.Call(_m, "GetKPastBackupKey", db, k)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBackupStorageRecorder) GetKPastBackupKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetKPastBackupKey", arg0, arg1)
}

func (_m *MockBackupStorage) RestoreBackupInfo(cli *clientv3.Client) error {
	ret := _m.ctrl.Call(_m, "RestoreBackupInfo", cli)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBackupStorageRecorder) RestoreBackupInfo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RestoreBackupInfo", arg0)
}
