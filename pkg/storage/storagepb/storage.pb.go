// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage/storagepb/storage.proto

/*
	Package storagepb is a generated protocol buffer package.

	It is generated from these files:
		storage/storagepb/storage.proto

	It has these top-level messages:
		GetLatestToLSNRequest
		GetLatestToLSNResponse
		GetKeysAtPointRequest
		GetKeysAtPointResponse
		BackupFileInfo
		GetFileByKeyRequest
		FileStream
		PurgePrevBackupRequest
		PurgePrevBackupResponse
		FullBackupContentStream
		IncBackupContentStream
		MysqldumpContentStream
		BackupReply
		PostCheckpointsRequest
		PostCheckpointsResponse
*/
package storagepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"
import polypb "github.com/taku-k/polymerase/pkg/polypb"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_taku_k_polymerase_pkg_polypb "github.com/taku-k/polymerase/pkg/polypb"
import time "time"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetLatestToLSNRequest struct {
	Db github_com_taku_k_polymerase_pkg_polypb.DatabaseID `protobuf:"bytes,1,opt,name=db,proto3,casttype=github.com/taku-k/polymerase/pkg/polypb.DatabaseID" json:"db,omitempty"`
}

func (m *GetLatestToLSNRequest) Reset()                    { *m = GetLatestToLSNRequest{} }
func (m *GetLatestToLSNRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLatestToLSNRequest) ProtoMessage()               {}
func (*GetLatestToLSNRequest) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{0} }

func (m *GetLatestToLSNRequest) GetDb() github_com_taku_k_polymerase_pkg_polypb.DatabaseID {
	if m != nil {
		return m.Db
	}
	return nil
}

type GetLatestToLSNResponse struct {
	Lsn string `protobuf:"bytes,1,opt,name=lsn,proto3" json:"lsn,omitempty"`
}

func (m *GetLatestToLSNResponse) Reset()                    { *m = GetLatestToLSNResponse{} }
func (m *GetLatestToLSNResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLatestToLSNResponse) ProtoMessage()               {}
func (*GetLatestToLSNResponse) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{1} }

func (m *GetLatestToLSNResponse) GetLsn() string {
	if m != nil {
		return m.Lsn
	}
	return ""
}

type GetKeysAtPointRequest struct {
	Db   github_com_taku_k_polymerase_pkg_polypb.DatabaseID `protobuf:"bytes,1,opt,name=db,proto3,casttype=github.com/taku-k/polymerase/pkg/polypb.DatabaseID" json:"db,omitempty"`
	From time.Time                                          `protobuf:"bytes,2,opt,name=from,stdtime" json:"from"`
}

func (m *GetKeysAtPointRequest) Reset()                    { *m = GetKeysAtPointRequest{} }
func (m *GetKeysAtPointRequest) String() string            { return proto.CompactTextString(m) }
func (*GetKeysAtPointRequest) ProtoMessage()               {}
func (*GetKeysAtPointRequest) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{2} }

func (m *GetKeysAtPointRequest) GetDb() github_com_taku_k_polymerase_pkg_polypb.DatabaseID {
	if m != nil {
		return m.Db
	}
	return nil
}

func (m *GetKeysAtPointRequest) GetFrom() time.Time {
	if m != nil {
		return m.From
	}
	return time.Time{}
}

type GetKeysAtPointResponse struct {
	Keys []*BackupFileInfo `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *GetKeysAtPointResponse) Reset()                    { *m = GetKeysAtPointResponse{} }
func (m *GetKeysAtPointResponse) String() string            { return proto.CompactTextString(m) }
func (*GetKeysAtPointResponse) ProtoMessage()               {}
func (*GetKeysAtPointResponse) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{3} }

func (m *GetKeysAtPointResponse) GetKeys() []*BackupFileInfo {
	if m != nil {
		return m.Keys
	}
	return nil
}

type BackupFileInfo struct {
	StorageType polypb.StorageType                          `protobuf:"varint,1,opt,name=storage_type,json=storageType,proto3,enum=polypb.StorageType" json:"storage_type,omitempty"`
	BackupType  polypb.BackupType                           `protobuf:"varint,2,opt,name=backup_type,json=backupType,proto3,enum=polypb.BackupType" json:"backup_type,omitempty"`
	Key         github_com_taku_k_polymerase_pkg_polypb.Key `protobuf:"bytes,3,opt,name=key,proto3,casttype=github.com/taku-k/polymerase/pkg/polypb.Key" json:"key,omitempty"`
	FileSize    int64                                       `protobuf:"varint,4,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
}

func (m *BackupFileInfo) Reset()                    { *m = BackupFileInfo{} }
func (m *BackupFileInfo) String() string            { return proto.CompactTextString(m) }
func (*BackupFileInfo) ProtoMessage()               {}
func (*BackupFileInfo) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{4} }

func (m *BackupFileInfo) GetStorageType() polypb.StorageType {
	if m != nil {
		return m.StorageType
	}
	return polypb.StorageType_LOCAL_DISK
}

func (m *BackupFileInfo) GetBackupType() polypb.BackupType {
	if m != nil {
		return m.BackupType
	}
	return polypb.BackupType_XTRABACKUP_FULL
}

func (m *BackupFileInfo) GetKey() github_com_taku_k_polymerase_pkg_polypb.Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *BackupFileInfo) GetFileSize() int64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

type GetFileByKeyRequest struct {
	Key         github_com_taku_k_polymerase_pkg_polypb.Key `protobuf:"bytes,1,opt,name=key,proto3,casttype=github.com/taku-k/polymerase/pkg/polypb.Key" json:"key,omitempty"`
	StorageType polypb.StorageType                          `protobuf:"varint,2,opt,name=storage_type,json=storageType,proto3,enum=polypb.StorageType" json:"storage_type,omitempty"`
}

func (m *GetFileByKeyRequest) Reset()                    { *m = GetFileByKeyRequest{} }
func (m *GetFileByKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*GetFileByKeyRequest) ProtoMessage()               {}
func (*GetFileByKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{5} }

func (m *GetFileByKeyRequest) GetKey() github_com_taku_k_polymerase_pkg_polypb.Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *GetFileByKeyRequest) GetStorageType() polypb.StorageType {
	if m != nil {
		return m.StorageType
	}
	return polypb.StorageType_LOCAL_DISK
}

type FileStream struct {
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *FileStream) Reset()                    { *m = FileStream{} }
func (m *FileStream) String() string            { return proto.CompactTextString(m) }
func (*FileStream) ProtoMessage()               {}
func (*FileStream) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{6} }

func (m *FileStream) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type PurgePrevBackupRequest struct {
	Db github_com_taku_k_polymerase_pkg_polypb.DatabaseID `protobuf:"bytes,1,opt,name=db,proto3,casttype=github.com/taku-k/polymerase/pkg/polypb.DatabaseID" json:"db,omitempty"`
}

func (m *PurgePrevBackupRequest) Reset()                    { *m = PurgePrevBackupRequest{} }
func (m *PurgePrevBackupRequest) String() string            { return proto.CompactTextString(m) }
func (*PurgePrevBackupRequest) ProtoMessage()               {}
func (*PurgePrevBackupRequest) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{7} }

func (m *PurgePrevBackupRequest) GetDb() github_com_taku_k_polymerase_pkg_polypb.DatabaseID {
	if m != nil {
		return m.Db
	}
	return nil
}

type PurgePrevBackupResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *PurgePrevBackupResponse) Reset()                    { *m = PurgePrevBackupResponse{} }
func (m *PurgePrevBackupResponse) String() string            { return proto.CompactTextString(m) }
func (*PurgePrevBackupResponse) ProtoMessage()               {}
func (*PurgePrevBackupResponse) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{8} }

func (m *PurgePrevBackupResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type FullBackupContentStream struct {
	Db      github_com_taku_k_polymerase_pkg_polypb.DatabaseID `protobuf:"bytes,1,opt,name=db,proto3,casttype=github.com/taku-k/polymerase/pkg/polypb.DatabaseID" json:"db,omitempty"`
	Content []byte                                             `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *FullBackupContentStream) Reset()                    { *m = FullBackupContentStream{} }
func (m *FullBackupContentStream) String() string            { return proto.CompactTextString(m) }
func (*FullBackupContentStream) ProtoMessage()               {}
func (*FullBackupContentStream) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{9} }

func (m *FullBackupContentStream) GetDb() github_com_taku_k_polymerase_pkg_polypb.DatabaseID {
	if m != nil {
		return m.Db
	}
	return nil
}

func (m *FullBackupContentStream) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type IncBackupContentStream struct {
	Db      github_com_taku_k_polymerase_pkg_polypb.DatabaseID `protobuf:"bytes,1,opt,name=db,proto3,casttype=github.com/taku-k/polymerase/pkg/polypb.DatabaseID" json:"db,omitempty"`
	Lsn     string                                             `protobuf:"bytes,2,opt,name=lsn,proto3" json:"lsn,omitempty"`
	Content []byte                                             `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *IncBackupContentStream) Reset()                    { *m = IncBackupContentStream{} }
func (m *IncBackupContentStream) String() string            { return proto.CompactTextString(m) }
func (*IncBackupContentStream) ProtoMessage()               {}
func (*IncBackupContentStream) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{10} }

func (m *IncBackupContentStream) GetDb() github_com_taku_k_polymerase_pkg_polypb.DatabaseID {
	if m != nil {
		return m.Db
	}
	return nil
}

func (m *IncBackupContentStream) GetLsn() string {
	if m != nil {
		return m.Lsn
	}
	return ""
}

func (m *IncBackupContentStream) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type MysqldumpContentStream struct {
	Db      github_com_taku_k_polymerase_pkg_polypb.DatabaseID `protobuf:"bytes,1,opt,name=db,proto3,casttype=github.com/taku-k/polymerase/pkg/polypb.DatabaseID" json:"db,omitempty"`
	Content []byte                                             `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *MysqldumpContentStream) Reset()                    { *m = MysqldumpContentStream{} }
func (m *MysqldumpContentStream) String() string            { return proto.CompactTextString(m) }
func (*MysqldumpContentStream) ProtoMessage()               {}
func (*MysqldumpContentStream) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{11} }

func (m *MysqldumpContentStream) GetDb() github_com_taku_k_polymerase_pkg_polypb.DatabaseID {
	if m != nil {
		return m.Db
	}
	return nil
}

func (m *MysqldumpContentStream) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type BackupReply struct {
	Message string                                      `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Key     github_com_taku_k_polymerase_pkg_polypb.Key `protobuf:"bytes,2,opt,name=key,proto3,casttype=github.com/taku-k/polymerase/pkg/polypb.Key" json:"key,omitempty"`
}

func (m *BackupReply) Reset()                    { *m = BackupReply{} }
func (m *BackupReply) String() string            { return proto.CompactTextString(m) }
func (*BackupReply) ProtoMessage()               {}
func (*BackupReply) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{12} }

func (m *BackupReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *BackupReply) GetKey() github_com_taku_k_polymerase_pkg_polypb.Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type PostCheckpointsRequest struct {
	Key     github_com_taku_k_polymerase_pkg_polypb.Key `protobuf:"bytes,1,opt,name=key,proto3,casttype=github.com/taku-k/polymerase/pkg/polypb.Key" json:"key,omitempty"`
	Content []byte                                      `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *PostCheckpointsRequest) Reset()                    { *m = PostCheckpointsRequest{} }
func (m *PostCheckpointsRequest) String() string            { return proto.CompactTextString(m) }
func (*PostCheckpointsRequest) ProtoMessage()               {}
func (*PostCheckpointsRequest) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{13} }

func (m *PostCheckpointsRequest) GetKey() github_com_taku_k_polymerase_pkg_polypb.Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *PostCheckpointsRequest) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type PostCheckpointsResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *PostCheckpointsResponse) Reset()                    { *m = PostCheckpointsResponse{} }
func (m *PostCheckpointsResponse) String() string            { return proto.CompactTextString(m) }
func (*PostCheckpointsResponse) ProtoMessage()               {}
func (*PostCheckpointsResponse) Descriptor() ([]byte, []int) { return fileDescriptorStorage, []int{14} }

func (m *PostCheckpointsResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*GetLatestToLSNRequest)(nil), "storagepb.GetLatestToLSNRequest")
	proto.RegisterType((*GetLatestToLSNResponse)(nil), "storagepb.GetLatestToLSNResponse")
	proto.RegisterType((*GetKeysAtPointRequest)(nil), "storagepb.GetKeysAtPointRequest")
	proto.RegisterType((*GetKeysAtPointResponse)(nil), "storagepb.GetKeysAtPointResponse")
	proto.RegisterType((*BackupFileInfo)(nil), "storagepb.BackupFileInfo")
	proto.RegisterType((*GetFileByKeyRequest)(nil), "storagepb.GetFileByKeyRequest")
	proto.RegisterType((*FileStream)(nil), "storagepb.FileStream")
	proto.RegisterType((*PurgePrevBackupRequest)(nil), "storagepb.PurgePrevBackupRequest")
	proto.RegisterType((*PurgePrevBackupResponse)(nil), "storagepb.PurgePrevBackupResponse")
	proto.RegisterType((*FullBackupContentStream)(nil), "storagepb.FullBackupContentStream")
	proto.RegisterType((*IncBackupContentStream)(nil), "storagepb.IncBackupContentStream")
	proto.RegisterType((*MysqldumpContentStream)(nil), "storagepb.MysqldumpContentStream")
	proto.RegisterType((*BackupReply)(nil), "storagepb.BackupReply")
	proto.RegisterType((*PostCheckpointsRequest)(nil), "storagepb.PostCheckpointsRequest")
	proto.RegisterType((*PostCheckpointsResponse)(nil), "storagepb.PostCheckpointsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StorageService service

type StorageServiceClient interface {
	GetLatestToLSN(ctx context.Context, in *GetLatestToLSNRequest, opts ...grpc.CallOption) (*GetLatestToLSNResponse, error)
	GetKeysAtPoint(ctx context.Context, in *GetKeysAtPointRequest, opts ...grpc.CallOption) (*GetKeysAtPointResponse, error)
	GetFileByKey(ctx context.Context, in *GetFileByKeyRequest, opts ...grpc.CallOption) (StorageService_GetFileByKeyClient, error)
	PurgePrevBackup(ctx context.Context, in *PurgePrevBackupRequest, opts ...grpc.CallOption) (*PurgePrevBackupResponse, error)
	TransferFullBackup(ctx context.Context, opts ...grpc.CallOption) (StorageService_TransferFullBackupClient, error)
	TransferIncBackup(ctx context.Context, opts ...grpc.CallOption) (StorageService_TransferIncBackupClient, error)
	TransferMysqldump(ctx context.Context, opts ...grpc.CallOption) (StorageService_TransferMysqldumpClient, error)
	PostCheckpoints(ctx context.Context, in *PostCheckpointsRequest, opts ...grpc.CallOption) (*PostCheckpointsResponse, error)
}

type storageServiceClient struct {
	cc *grpc.ClientConn
}

func NewStorageServiceClient(cc *grpc.ClientConn) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) GetLatestToLSN(ctx context.Context, in *GetLatestToLSNRequest, opts ...grpc.CallOption) (*GetLatestToLSNResponse, error) {
	out := new(GetLatestToLSNResponse)
	err := grpc.Invoke(ctx, "/storagepb.StorageService/GetLatestToLSN", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetKeysAtPoint(ctx context.Context, in *GetKeysAtPointRequest, opts ...grpc.CallOption) (*GetKeysAtPointResponse, error) {
	out := new(GetKeysAtPointResponse)
	err := grpc.Invoke(ctx, "/storagepb.StorageService/GetKeysAtPoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetFileByKey(ctx context.Context, in *GetFileByKeyRequest, opts ...grpc.CallOption) (StorageService_GetFileByKeyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StorageService_serviceDesc.Streams[0], c.cc, "/storagepb.StorageService/GetFileByKey", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceGetFileByKeyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageService_GetFileByKeyClient interface {
	Recv() (*FileStream, error)
	grpc.ClientStream
}

type storageServiceGetFileByKeyClient struct {
	grpc.ClientStream
}

func (x *storageServiceGetFileByKeyClient) Recv() (*FileStream, error) {
	m := new(FileStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageServiceClient) PurgePrevBackup(ctx context.Context, in *PurgePrevBackupRequest, opts ...grpc.CallOption) (*PurgePrevBackupResponse, error) {
	out := new(PurgePrevBackupResponse)
	err := grpc.Invoke(ctx, "/storagepb.StorageService/PurgePrevBackup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) TransferFullBackup(ctx context.Context, opts ...grpc.CallOption) (StorageService_TransferFullBackupClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StorageService_serviceDesc.Streams[1], c.cc, "/storagepb.StorageService/TransferFullBackup", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceTransferFullBackupClient{stream}
	return x, nil
}

type StorageService_TransferFullBackupClient interface {
	Send(*FullBackupContentStream) error
	CloseAndRecv() (*BackupReply, error)
	grpc.ClientStream
}

type storageServiceTransferFullBackupClient struct {
	grpc.ClientStream
}

func (x *storageServiceTransferFullBackupClient) Send(m *FullBackupContentStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageServiceTransferFullBackupClient) CloseAndRecv() (*BackupReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BackupReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageServiceClient) TransferIncBackup(ctx context.Context, opts ...grpc.CallOption) (StorageService_TransferIncBackupClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StorageService_serviceDesc.Streams[2], c.cc, "/storagepb.StorageService/TransferIncBackup", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceTransferIncBackupClient{stream}
	return x, nil
}

type StorageService_TransferIncBackupClient interface {
	Send(*IncBackupContentStream) error
	CloseAndRecv() (*BackupReply, error)
	grpc.ClientStream
}

type storageServiceTransferIncBackupClient struct {
	grpc.ClientStream
}

func (x *storageServiceTransferIncBackupClient) Send(m *IncBackupContentStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageServiceTransferIncBackupClient) CloseAndRecv() (*BackupReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BackupReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageServiceClient) TransferMysqldump(ctx context.Context, opts ...grpc.CallOption) (StorageService_TransferMysqldumpClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StorageService_serviceDesc.Streams[3], c.cc, "/storagepb.StorageService/TransferMysqldump", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceTransferMysqldumpClient{stream}
	return x, nil
}

type StorageService_TransferMysqldumpClient interface {
	Send(*MysqldumpContentStream) error
	CloseAndRecv() (*BackupReply, error)
	grpc.ClientStream
}

type storageServiceTransferMysqldumpClient struct {
	grpc.ClientStream
}

func (x *storageServiceTransferMysqldumpClient) Send(m *MysqldumpContentStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageServiceTransferMysqldumpClient) CloseAndRecv() (*BackupReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(BackupReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageServiceClient) PostCheckpoints(ctx context.Context, in *PostCheckpointsRequest, opts ...grpc.CallOption) (*PostCheckpointsResponse, error) {
	out := new(PostCheckpointsResponse)
	err := grpc.Invoke(ctx, "/storagepb.StorageService/PostCheckpoints", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StorageService service

type StorageServiceServer interface {
	GetLatestToLSN(context.Context, *GetLatestToLSNRequest) (*GetLatestToLSNResponse, error)
	GetKeysAtPoint(context.Context, *GetKeysAtPointRequest) (*GetKeysAtPointResponse, error)
	GetFileByKey(*GetFileByKeyRequest, StorageService_GetFileByKeyServer) error
	PurgePrevBackup(context.Context, *PurgePrevBackupRequest) (*PurgePrevBackupResponse, error)
	TransferFullBackup(StorageService_TransferFullBackupServer) error
	TransferIncBackup(StorageService_TransferIncBackupServer) error
	TransferMysqldump(StorageService_TransferMysqldumpServer) error
	PostCheckpoints(context.Context, *PostCheckpointsRequest) (*PostCheckpointsResponse, error)
}

func RegisterStorageServiceServer(s *grpc.Server, srv StorageServiceServer) {
	s.RegisterService(&_StorageService_serviceDesc, srv)
}

func _StorageService_GetLatestToLSN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestToLSNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetLatestToLSN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storagepb.StorageService/GetLatestToLSN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetLatestToLSN(ctx, req.(*GetLatestToLSNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetKeysAtPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeysAtPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetKeysAtPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storagepb.StorageService/GetKeysAtPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetKeysAtPoint(ctx, req.(*GetKeysAtPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetFileByKey_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileByKeyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServiceServer).GetFileByKey(m, &storageServiceGetFileByKeyServer{stream})
}

type StorageService_GetFileByKeyServer interface {
	Send(*FileStream) error
	grpc.ServerStream
}

type storageServiceGetFileByKeyServer struct {
	grpc.ServerStream
}

func (x *storageServiceGetFileByKeyServer) Send(m *FileStream) error {
	return x.ServerStream.SendMsg(m)
}

func _StorageService_PurgePrevBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgePrevBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).PurgePrevBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storagepb.StorageService/PurgePrevBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).PurgePrevBackup(ctx, req.(*PurgePrevBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_TransferFullBackup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServiceServer).TransferFullBackup(&storageServiceTransferFullBackupServer{stream})
}

type StorageService_TransferFullBackupServer interface {
	SendAndClose(*BackupReply) error
	Recv() (*FullBackupContentStream, error)
	grpc.ServerStream
}

type storageServiceTransferFullBackupServer struct {
	grpc.ServerStream
}

func (x *storageServiceTransferFullBackupServer) SendAndClose(m *BackupReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageServiceTransferFullBackupServer) Recv() (*FullBackupContentStream, error) {
	m := new(FullBackupContentStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StorageService_TransferIncBackup_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServiceServer).TransferIncBackup(&storageServiceTransferIncBackupServer{stream})
}

type StorageService_TransferIncBackupServer interface {
	SendAndClose(*BackupReply) error
	Recv() (*IncBackupContentStream, error)
	grpc.ServerStream
}

type storageServiceTransferIncBackupServer struct {
	grpc.ServerStream
}

func (x *storageServiceTransferIncBackupServer) SendAndClose(m *BackupReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageServiceTransferIncBackupServer) Recv() (*IncBackupContentStream, error) {
	m := new(IncBackupContentStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StorageService_TransferMysqldump_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServiceServer).TransferMysqldump(&storageServiceTransferMysqldumpServer{stream})
}

type StorageService_TransferMysqldumpServer interface {
	SendAndClose(*BackupReply) error
	Recv() (*MysqldumpContentStream, error)
	grpc.ServerStream
}

type storageServiceTransferMysqldumpServer struct {
	grpc.ServerStream
}

func (x *storageServiceTransferMysqldumpServer) SendAndClose(m *BackupReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageServiceTransferMysqldumpServer) Recv() (*MysqldumpContentStream, error) {
	m := new(MysqldumpContentStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StorageService_PostCheckpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCheckpointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).PostCheckpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storagepb.StorageService/PostCheckpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).PostCheckpoints(ctx, req.(*PostCheckpointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StorageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "storagepb.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestToLSN",
			Handler:    _StorageService_GetLatestToLSN_Handler,
		},
		{
			MethodName: "GetKeysAtPoint",
			Handler:    _StorageService_GetKeysAtPoint_Handler,
		},
		{
			MethodName: "PurgePrevBackup",
			Handler:    _StorageService_PurgePrevBackup_Handler,
		},
		{
			MethodName: "PostCheckpoints",
			Handler:    _StorageService_PostCheckpoints_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFileByKey",
			Handler:       _StorageService_GetFileByKey_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TransferFullBackup",
			Handler:       _StorageService_TransferFullBackup_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TransferIncBackup",
			Handler:       _StorageService_TransferIncBackup_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TransferMysqldump",
			Handler:       _StorageService_TransferMysqldump_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "storage/storagepb/storage.proto",
}

func (m *GetLatestToLSNRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestToLSNRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Db) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Db)))
		i += copy(dAtA[i:], m.Db)
	}
	return i, nil
}

func (m *GetLatestToLSNResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLatestToLSNResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Lsn) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Lsn)))
		i += copy(dAtA[i:], m.Lsn)
	}
	return i, nil
}

func (m *GetKeysAtPointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetKeysAtPointRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Db) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Db)))
		i += copy(dAtA[i:], m.Db)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintStorage(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.From)))
	n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.From, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *GetKeysAtPointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetKeysAtPointResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, msg := range m.Keys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintStorage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BackupFileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupFileInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StorageType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.StorageType))
	}
	if m.BackupType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.BackupType))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.FileSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.FileSize))
	}
	return i, nil
}

func (m *GetFileByKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetFileByKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.StorageType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStorage(dAtA, i, uint64(m.StorageType))
	}
	return i, nil
}

func (m *FileStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileStream) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *PurgePrevBackupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PurgePrevBackupRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Db) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Db)))
		i += copy(dAtA[i:], m.Db)
	}
	return i, nil
}

func (m *PurgePrevBackupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PurgePrevBackupResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *FullBackupContentStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FullBackupContentStream) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Db) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Db)))
		i += copy(dAtA[i:], m.Db)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *IncBackupContentStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncBackupContentStream) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Db) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Db)))
		i += copy(dAtA[i:], m.Db)
	}
	if len(m.Lsn) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Lsn)))
		i += copy(dAtA[i:], m.Lsn)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *MysqldumpContentStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MysqldumpContentStream) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Db) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Db)))
		i += copy(dAtA[i:], m.Db)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *BackupReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BackupReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *PostCheckpointsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostCheckpointsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *PostCheckpointsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PostCheckpointsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func encodeFixed64Storage(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Storage(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintStorage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetLatestToLSNRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Db)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *GetLatestToLSNResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Lsn)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *GetKeysAtPointRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Db)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.From)
	n += 1 + l + sovStorage(uint64(l))
	return n
}

func (m *GetKeysAtPointResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovStorage(uint64(l))
		}
	}
	return n
}

func (m *BackupFileInfo) Size() (n int) {
	var l int
	_ = l
	if m.StorageType != 0 {
		n += 1 + sovStorage(uint64(m.StorageType))
	}
	if m.BackupType != 0 {
		n += 1 + sovStorage(uint64(m.BackupType))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovStorage(uint64(m.FileSize))
	}
	return n
}

func (m *GetFileByKeyRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.StorageType != 0 {
		n += 1 + sovStorage(uint64(m.StorageType))
	}
	return n
}

func (m *FileStream) Size() (n int) {
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *PurgePrevBackupRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Db)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *PurgePrevBackupResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *FullBackupContentStream) Size() (n int) {
	var l int
	_ = l
	l = len(m.Db)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *IncBackupContentStream) Size() (n int) {
	var l int
	_ = l
	l = len(m.Db)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Lsn)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *MysqldumpContentStream) Size() (n int) {
	var l int
	_ = l
	l = len(m.Db)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *BackupReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *PostCheckpointsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func (m *PostCheckpointsResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func sovStorage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStorage(x uint64) (n int) {
	return sovStorage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetLatestToLSNRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestToLSNRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestToLSNRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Db", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Db = append(m.Db[:0], dAtA[iNdEx:postIndex]...)
			if m.Db == nil {
				m.Db = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLatestToLSNResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLatestToLSNResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLatestToLSNResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lsn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lsn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetKeysAtPointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetKeysAtPointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetKeysAtPointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Db", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Db = append(m.Db[:0], dAtA[iNdEx:postIndex]...)
			if m.Db == nil {
				m.Db = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.From, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetKeysAtPointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetKeysAtPointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetKeysAtPointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &BackupFileInfo{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupFileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupFileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupFileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageType", wireType)
			}
			m.StorageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageType |= (polypb.StorageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackupType", wireType)
			}
			m.BackupType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackupType |= (polypb.BackupType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetFileByKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetFileByKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetFileByKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageType", wireType)
			}
			m.StorageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageType |= (polypb.StorageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PurgePrevBackupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PurgePrevBackupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PurgePrevBackupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Db", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Db = append(m.Db[:0], dAtA[iNdEx:postIndex]...)
			if m.Db == nil {
				m.Db = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PurgePrevBackupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PurgePrevBackupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PurgePrevBackupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FullBackupContentStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FullBackupContentStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FullBackupContentStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Db", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Db = append(m.Db[:0], dAtA[iNdEx:postIndex]...)
			if m.Db == nil {
				m.Db = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncBackupContentStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncBackupContentStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncBackupContentStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Db", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Db = append(m.Db[:0], dAtA[iNdEx:postIndex]...)
			if m.Db == nil {
				m.Db = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lsn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lsn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MysqldumpContentStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MysqldumpContentStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MysqldumpContentStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Db", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Db = append(m.Db[:0], dAtA[iNdEx:postIndex]...)
			if m.Db == nil {
				m.Db = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BackupReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BackupReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BackupReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostCheckpointsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostCheckpointsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostCheckpointsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PostCheckpointsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PostCheckpointsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PostCheckpointsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStorage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStorage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStorage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStorage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStorage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStorage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("storage/storagepb/storage.proto", fileDescriptorStorage) }

var fileDescriptorStorage = []byte{
	// 794 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xc1, 0x6e, 0xeb, 0x44,
	0x14, 0xcd, 0x38, 0x85, 0xf7, 0x3a, 0xa9, 0xc2, 0x63, 0x9e, 0x5e, 0x1a, 0x82, 0x94, 0x84, 0x59,
	0xa0, 0x08, 0x54, 0x1b, 0xa5, 0x52, 0xc5, 0xb6, 0x69, 0xd5, 0x2a, 0x6a, 0x41, 0x91, 0x13, 0x09,
	0x89, 0x4d, 0xb1, 0x93, 0x1b, 0xd7, 0xc4, 0xf6, 0xb8, 0x9e, 0x71, 0x25, 0x97, 0x5f, 0x60, 0xd1,
	0x25, 0x7c, 0x0f, 0x9b, 0x2e, 0xf9, 0x01, 0x0a, 0x2a, 0x7f, 0xd1, 0x15, 0xf2, 0xd8, 0x4e, 0xec,
	0x34, 0x2d, 0x11, 0x04, 0x56, 0x9d, 0xe9, 0xcc, 0xb9, 0xf7, 0xdc, 0x33, 0xf7, 0x1e, 0x07, 0xb7,
	0xb8, 0x60, 0x81, 0x61, 0x81, 0x96, 0xfe, 0xf5, 0xcd, 0x6c, 0xa5, 0xfa, 0x01, 0x13, 0x8c, 0x6c,
	0xcf, 0x0f, 0x1a, 0x2d, 0x8b, 0x31, 0xcb, 0x01, 0x4d, 0x1e, 0x98, 0xe1, 0x54, 0x13, 0xb6, 0x0b,
	0x5c, 0x18, 0xae, 0x9f, 0xdc, 0x6d, 0x1c, 0x58, 0xb6, 0xb8, 0x0c, 0x4d, 0x75, 0xcc, 0x5c, 0x4d,
	0x18, 0xb3, 0x70, 0x6f, 0xa6, 0xf9, 0xcc, 0x89, 0x5c, 0x08, 0x0c, 0x0e, 0x9a, 0x3f, 0xb3, 0xe4,
	0xd6, 0x37, 0x35, 0x17, 0x84, 0x31, 0x31, 0x84, 0x91, 0xe2, 0xf6, 0x72, 0x38, 0x8b, 0x59, 0x6c,
	0x91, 0x21, 0xde, 0xc9, 0x8d, 0x5c, 0x25, 0xd7, 0xe9, 0x05, 0x7e, 0x77, 0x0a, 0xe2, 0xdc, 0x10,
	0xc0, 0xc5, 0x88, 0x9d, 0x0f, 0xbf, 0xd6, 0xe1, 0x2a, 0x04, 0x2e, 0xc8, 0x09, 0x56, 0x26, 0x66,
	0x1d, 0xb5, 0x51, 0x67, 0xa7, 0x77, 0xf0, 0x78, 0xdf, 0xea, 0xae, 0xc9, 0x47, 0x3d, 0x36, 0x84,
	0x61, 0x1a, 0x1c, 0xfa, 0xc7, 0xba, 0x32, 0x31, 0xe9, 0x67, 0xb8, 0xb6, 0x9c, 0x80, 0xfb, 0xcc,
	0xe3, 0x40, 0xde, 0xe0, 0xb2, 0xc3, 0x3d, 0x99, 0x62, 0x5b, 0x8f, 0x97, 0xf4, 0x67, 0x24, 0xd9,
	0x9c, 0x41, 0xc4, 0x0f, 0xc5, 0x80, 0xd9, 0x9e, 0xd8, 0x30, 0x1b, 0xf2, 0x25, 0xde, 0x9a, 0x06,
	0xcc, 0xad, 0x2b, 0x6d, 0xd4, 0xa9, 0x74, 0x1b, 0x6a, 0xf2, 0x0a, 0x6a, 0xa6, 0x91, 0x3a, 0xca,
	0x5e, 0xa1, 0xf7, 0xfa, 0xee, 0xbe, 0x55, 0xba, 0xfd, 0xbd, 0x85, 0x74, 0x89, 0xa0, 0xa7, 0xb2,
	0x8e, 0x02, 0xb5, 0xb4, 0x8e, 0x3d, 0xbc, 0x35, 0x83, 0x88, 0xd7, 0x51, 0xbb, 0xdc, 0xa9, 0x74,
	0x3f, 0x52, 0xe7, 0x8f, 0xac, 0xf6, 0x8c, 0xf1, 0x2c, 0xf4, 0x4f, 0x6c, 0x07, 0xfa, 0xde, 0x94,
	0xe9, 0xf2, 0x1a, 0xfd, 0x0d, 0xe1, 0x6a, 0xf1, 0x80, 0x1c, 0xe0, 0x9d, 0x14, 0x74, 0x21, 0x22,
	0x1f, 0x64, 0x9d, 0xd5, 0xee, 0x5b, 0x35, 0xad, 0x61, 0x98, 0x9c, 0x8d, 0x22, 0x1f, 0xf4, 0x0a,
	0x5f, 0x6c, 0xc8, 0x3e, 0xae, 0x98, 0x32, 0x52, 0x02, 0x53, 0x24, 0x8c, 0x64, 0xb0, 0x24, 0x89,
	0x44, 0x61, 0x73, 0xbe, 0x26, 0x87, 0xb8, 0x3c, 0x83, 0xa8, 0x5e, 0x96, 0x5a, 0x6a, 0x8f, 0xf7,
	0xad, 0xcf, 0xd7, 0xd5, 0xf2, 0x0c, 0x22, 0x3d, 0xc6, 0x92, 0x8f, 0xf1, 0xf6, 0xd4, 0x76, 0xe0,
	0x82, 0xdb, 0x37, 0x50, 0xdf, 0x6a, 0xa3, 0x4e, 0x59, 0x7f, 0x1d, 0xff, 0x63, 0x68, 0xdf, 0x00,
	0xbd, 0x45, 0xf8, 0xed, 0x29, 0x88, 0xb8, 0xb8, 0x5e, 0x14, 0x43, 0xd2, 0x27, 0x4c, 0xf3, 0xa2,
	0x7f, 0x91, 0x77, 0x59, 0x27, 0x65, 0x3d, 0x9d, 0xe8, 0xa7, 0x18, 0xc7, 0x74, 0x86, 0x22, 0x00,
	0xc3, 0x25, 0x75, 0xfc, 0x6a, 0xcc, 0x3c, 0x01, 0x9e, 0x48, 0xc8, 0xe8, 0xd9, 0x96, 0x7e, 0x87,
	0x6b, 0x83, 0x30, 0xb0, 0x60, 0x10, 0xc0, 0x75, 0xa2, 0xde, 0xa6, 0xa7, 0x61, 0x1f, 0xef, 0x3e,
	0xc9, 0x90, 0xb6, 0x51, 0x1d, 0xbf, 0x72, 0x81, 0x73, 0xc3, 0x82, 0x74, 0x24, 0xb2, 0x2d, 0xfd,
	0x01, 0xef, 0x9e, 0x84, 0x8e, 0x93, 0xdc, 0x3f, 0x4a, 0xb8, 0xa6, 0xb5, 0x6c, 0x6a, 0x2e, 0x72,
	0x9a, 0x28, 0x45, 0x4d, 0x7e, 0x44, 0xb8, 0xd6, 0xf7, 0xc6, 0xff, 0x65, 0xf2, 0xd4, 0x08, 0x94,
	0xb9, 0x11, 0xe4, 0xe9, 0x94, 0x8b, 0x74, 0x6e, 0x70, 0xed, 0xab, 0x88, 0x5f, 0x39, 0x93, 0xd0,
	0xfd, 0xdf, 0xa5, 0xf8, 0x1e, 0x57, 0xb2, 0x37, 0xf3, 0x9d, 0xe8, 0xf9, 0x07, 0xcb, 0x5a, 0x5d,
	0xf9, 0xe7, 0xad, 0x4e, 0x43, 0x5c, 0x1b, 0x30, 0x2e, 0x8e, 0x2e, 0x61, 0x3c, 0xf3, 0x63, 0xbb,
	0xe1, 0x1b, 0x9c, 0xa3, 0xe7, 0x4b, 0x8c, 0xfb, 0x73, 0x39, 0xed, 0xdf, 0xf5, 0x67, 0xf7, 0x97,
	0xf7, 0x70, 0x35, 0x9d, 0xbd, 0x21, 0x04, 0xd7, 0xf6, 0x18, 0xc8, 0x37, 0xb8, 0x5a, 0x74, 0x7d,
	0xd2, 0xce, 0xf9, 0xe2, 0xca, 0x2f, 0x4e, 0xe3, 0x93, 0x17, 0x6e, 0x24, 0x1c, 0x68, 0x29, 0x0d,
	0x9c, 0xb3, 0xe1, 0xe5, 0xc0, 0x4f, 0x3f, 0x1e, 0xcb, 0x81, 0x57, 0x78, 0x38, 0x2d, 0x91, 0x3e,
	0xde, 0xc9, 0xbb, 0x16, 0x69, 0x16, 0x41, 0xcb, 0x76, 0xd6, 0x78, 0x97, 0x3b, 0x5f, 0x98, 0x0b,
	0x2d, 0x7d, 0x81, 0xc8, 0xb7, 0xf8, 0x83, 0xa5, 0x21, 0x27, 0x79, 0x0a, 0xab, 0x2d, 0xa6, 0x41,
	0x5f, 0xba, 0x32, 0xa7, 0x39, 0xc2, 0x64, 0x14, 0x18, 0x1e, 0x9f, 0x42, 0xb0, 0xf0, 0x04, 0x92,
	0xc7, 0x3e, 0x63, 0x15, 0x8d, 0xda, 0x93, 0x0f, 0x93, 0x6c, 0x63, 0x5a, 0xea, 0x20, 0xa2, 0xe3,
	0x0f, 0xb3, 0xa8, 0xf3, 0x59, 0x2f, 0x70, 0x5e, 0xed, 0x00, 0xeb, 0xc6, 0x9c, 0x4f, 0x6c, 0x21,
	0xe6, 0xea, 0x39, 0x7e, 0x31, 0x66, 0xac, 0x6c, 0xb1, 0x3d, 0x8b, 0xca, 0xae, 0x9c, 0x98, 0xa2,
	0xb2, 0xab, 0xbb, 0x9b, 0x96, 0x7a, 0x6f, 0xee, 0x1e, 0x9a, 0xe8, 0xd7, 0x87, 0x26, 0xfa, 0xe3,
	0xa1, 0x89, 0x7e, 0xfa, 0xb3, 0x59, 0x32, 0xdf, 0x97, 0x3f, 0x0b, 0xf6, 0xff, 0x0a, 0x00, 0x00,
	0xff, 0xff, 0x93, 0x71, 0x1c, 0xb9, 0xd8, 0x09, 0x00, 0x00,
}
