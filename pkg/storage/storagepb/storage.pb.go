// Code generated by protoc-gen-go. DO NOT EDIT.
// source: storage/storagepb/storage.proto

/*
Package storagepb is a generated protocol buffer package.

It is generated from these files:
	storage/storagepb/storage.proto

It has these top-level messages:
	GetLatestToLSNRequest
	GetLatestToLSNResponse
	GetKeysAtPointRequest
	GetKeysAtPointResponse
	BackupFileInfo
	GetFileByKeyRequest
	FileStream
*/
package storagepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetLatestToLSNRequest struct {
	Db string `protobuf:"bytes,1,opt,name=db" json:"db,omitempty"`
}

func (m *GetLatestToLSNRequest) Reset()                    { *m = GetLatestToLSNRequest{} }
func (m *GetLatestToLSNRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLatestToLSNRequest) ProtoMessage()               {}
func (*GetLatestToLSNRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetLatestToLSNRequest) GetDb() string {
	if m != nil {
		return m.Db
	}
	return ""
}

type GetLatestToLSNResponse struct {
	Lsn string `protobuf:"bytes,1,opt,name=lsn" json:"lsn,omitempty"`
}

func (m *GetLatestToLSNResponse) Reset()                    { *m = GetLatestToLSNResponse{} }
func (m *GetLatestToLSNResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLatestToLSNResponse) ProtoMessage()               {}
func (*GetLatestToLSNResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetLatestToLSNResponse) GetLsn() string {
	if m != nil {
		return m.Lsn
	}
	return ""
}

type GetKeysAtPointRequest struct {
	Db   string `protobuf:"bytes,1,opt,name=db" json:"db,omitempty"`
	From string `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
}

func (m *GetKeysAtPointRequest) Reset()                    { *m = GetKeysAtPointRequest{} }
func (m *GetKeysAtPointRequest) String() string            { return proto.CompactTextString(m) }
func (*GetKeysAtPointRequest) ProtoMessage()               {}
func (*GetKeysAtPointRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetKeysAtPointRequest) GetDb() string {
	if m != nil {
		return m.Db
	}
	return ""
}

func (m *GetKeysAtPointRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type GetKeysAtPointResponse struct {
	Keys []*BackupFileInfo `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
}

func (m *GetKeysAtPointResponse) Reset()                    { *m = GetKeysAtPointResponse{} }
func (m *GetKeysAtPointResponse) String() string            { return proto.CompactTextString(m) }
func (*GetKeysAtPointResponse) ProtoMessage()               {}
func (*GetKeysAtPointResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetKeysAtPointResponse) GetKeys() []*BackupFileInfo {
	if m != nil {
		return m.Keys
	}
	return nil
}

type BackupFileInfo struct {
	StorageType string `protobuf:"bytes,1,opt,name=storage_type,json=storageType" json:"storage_type,omitempty"`
	BackupType  string `protobuf:"bytes,2,opt,name=backup_type,json=backupType" json:"backup_type,omitempty"`
	Key         string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Size        int64  `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
}

func (m *BackupFileInfo) Reset()                    { *m = BackupFileInfo{} }
func (m *BackupFileInfo) String() string            { return proto.CompactTextString(m) }
func (*BackupFileInfo) ProtoMessage()               {}
func (*BackupFileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BackupFileInfo) GetStorageType() string {
	if m != nil {
		return m.StorageType
	}
	return ""
}

func (m *BackupFileInfo) GetBackupType() string {
	if m != nil {
		return m.BackupType
	}
	return ""
}

func (m *BackupFileInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *BackupFileInfo) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type GetFileByKeyRequest struct {
	Key         string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	StorageType string `protobuf:"bytes,2,opt,name=storage_type,json=storageType" json:"storage_type,omitempty"`
}

func (m *GetFileByKeyRequest) Reset()                    { *m = GetFileByKeyRequest{} }
func (m *GetFileByKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*GetFileByKeyRequest) ProtoMessage()               {}
func (*GetFileByKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetFileByKeyRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *GetFileByKeyRequest) GetStorageType() string {
	if m != nil {
		return m.StorageType
	}
	return ""
}

type FileStream struct {
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *FileStream) Reset()                    { *m = FileStream{} }
func (m *FileStream) String() string            { return proto.CompactTextString(m) }
func (*FileStream) ProtoMessage()               {}
func (*FileStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FileStream) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*GetLatestToLSNRequest)(nil), "storagepb.GetLatestToLSNRequest")
	proto.RegisterType((*GetLatestToLSNResponse)(nil), "storagepb.GetLatestToLSNResponse")
	proto.RegisterType((*GetKeysAtPointRequest)(nil), "storagepb.GetKeysAtPointRequest")
	proto.RegisterType((*GetKeysAtPointResponse)(nil), "storagepb.GetKeysAtPointResponse")
	proto.RegisterType((*BackupFileInfo)(nil), "storagepb.BackupFileInfo")
	proto.RegisterType((*GetFileByKeyRequest)(nil), "storagepb.GetFileByKeyRequest")
	proto.RegisterType((*FileStream)(nil), "storagepb.FileStream")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for StorageService service

type StorageServiceClient interface {
	GetLatestToLSN(ctx context.Context, in *GetLatestToLSNRequest, opts ...grpc.CallOption) (*GetLatestToLSNResponse, error)
	GetKeysAtPoint(ctx context.Context, in *GetKeysAtPointRequest, opts ...grpc.CallOption) (*GetKeysAtPointResponse, error)
	GetFileByKey(ctx context.Context, in *GetFileByKeyRequest, opts ...grpc.CallOption) (StorageService_GetFileByKeyClient, error)
}

type storageServiceClient struct {
	cc *grpc.ClientConn
}

func NewStorageServiceClient(cc *grpc.ClientConn) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) GetLatestToLSN(ctx context.Context, in *GetLatestToLSNRequest, opts ...grpc.CallOption) (*GetLatestToLSNResponse, error) {
	out := new(GetLatestToLSNResponse)
	err := grpc.Invoke(ctx, "/storagepb.StorageService/GetLatestToLSN", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetKeysAtPoint(ctx context.Context, in *GetKeysAtPointRequest, opts ...grpc.CallOption) (*GetKeysAtPointResponse, error) {
	out := new(GetKeysAtPointResponse)
	err := grpc.Invoke(ctx, "/storagepb.StorageService/GetKeysAtPoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetFileByKey(ctx context.Context, in *GetFileByKeyRequest, opts ...grpc.CallOption) (StorageService_GetFileByKeyClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StorageService_serviceDesc.Streams[0], c.cc, "/storagepb.StorageService/GetFileByKey", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceGetFileByKeyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageService_GetFileByKeyClient interface {
	Recv() (*FileStream, error)
	grpc.ClientStream
}

type storageServiceGetFileByKeyClient struct {
	grpc.ClientStream
}

func (x *storageServiceGetFileByKeyClient) Recv() (*FileStream, error) {
	m := new(FileStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for StorageService service

type StorageServiceServer interface {
	GetLatestToLSN(context.Context, *GetLatestToLSNRequest) (*GetLatestToLSNResponse, error)
	GetKeysAtPoint(context.Context, *GetKeysAtPointRequest) (*GetKeysAtPointResponse, error)
	GetFileByKey(*GetFileByKeyRequest, StorageService_GetFileByKeyServer) error
}

func RegisterStorageServiceServer(s *grpc.Server, srv StorageServiceServer) {
	s.RegisterService(&_StorageService_serviceDesc, srv)
}

func _StorageService_GetLatestToLSN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestToLSNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetLatestToLSN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storagepb.StorageService/GetLatestToLSN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetLatestToLSN(ctx, req.(*GetLatestToLSNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetKeysAtPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeysAtPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetKeysAtPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storagepb.StorageService/GetKeysAtPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetKeysAtPoint(ctx, req.(*GetKeysAtPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetFileByKey_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFileByKeyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServiceServer).GetFileByKey(m, &storageServiceGetFileByKeyServer{stream})
}

type StorageService_GetFileByKeyServer interface {
	Send(*FileStream) error
	grpc.ServerStream
}

type storageServiceGetFileByKeyServer struct {
	grpc.ServerStream
}

func (x *storageServiceGetFileByKeyServer) Send(m *FileStream) error {
	return x.ServerStream.SendMsg(m)
}

var _StorageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "storagepb.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestToLSN",
			Handler:    _StorageService_GetLatestToLSN_Handler,
		},
		{
			MethodName: "GetKeysAtPoint",
			Handler:    _StorageService_GetKeysAtPoint_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFileByKey",
			Handler:       _StorageService_GetFileByKey_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "storage/storagepb/storage.proto",
}

func init() { proto.RegisterFile("storage/storagepb/storage.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcf, 0x8b, 0xda, 0x40,
	0x14, 0x36, 0x89, 0xb4, 0xf8, 0x94, 0x20, 0x53, 0x2c, 0xa9, 0x87, 0x1a, 0xe7, 0xd0, 0x4a, 0xa1,
	0xb6, 0xd8, 0x63, 0x4f, 0xf5, 0x50, 0xb1, 0x4a, 0x29, 0x89, 0xd0, 0xe3, 0x92, 0xe8, 0x73, 0x09,
	0xd1, 0x4c, 0x36, 0x33, 0x2e, 0x8c, 0xff, 0xc3, 0xfe, 0xcf, 0x4b, 0x26, 0xa3, 0x26, 0xd1, 0xdd,
	0x53, 0x5e, 0xde, 0xfb, 0xbe, 0xef, 0xfd, 0xf8, 0x06, 0x06, 0x5c, 0xb0, 0x2c, 0xb8, 0xc7, 0x6f,
	0xfa, 0x9b, 0x86, 0xa7, 0x68, 0x9c, 0x66, 0x4c, 0x30, 0xd2, 0x3a, 0x17, 0xe8, 0x67, 0xe8, 0xcd,
	0x50, 0x2c, 0x03, 0x81, 0x5c, 0xac, 0xd8, 0xd2, 0xff, 0xeb, 0xe1, 0xc3, 0x01, 0xb9, 0x20, 0x36,
	0x98, 0x9b, 0xd0, 0x31, 0x5c, 0x63, 0xd4, 0xf2, 0xcc, 0x4d, 0x48, 0xbf, 0xc0, 0xfb, 0x3a, 0x90,
	0xa7, 0x2c, 0xe1, 0x48, 0xba, 0x60, 0xed, 0x78, 0xa2, 0xa1, 0x79, 0x48, 0x7f, 0x2a, 0xd1, 0x05,
	0x4a, 0xfe, 0x4b, 0xfc, 0x63, 0x51, 0x22, 0x5e, 0x10, 0x25, 0x04, 0x9a, 0xdb, 0x8c, 0xed, 0x1d,
	0x53, 0x65, 0x54, 0x4c, 0x67, 0xaa, 0x51, 0x85, 0xac, 0x1b, 0x7d, 0x85, 0x66, 0x8c, 0x92, 0x3b,
	0x86, 0x6b, 0x8d, 0xda, 0x93, 0x0f, 0xe3, 0xf3, 0x16, 0xe3, 0x69, 0xb0, 0x8e, 0x0f, 0xe9, 0xef,
	0x68, 0x87, 0xf3, 0x64, 0xcb, 0x3c, 0x05, 0xa3, 0x47, 0xb0, 0xab, 0x79, 0x32, 0x84, 0x8e, 0xe6,
	0xdc, 0x09, 0x99, 0xa2, 0x1e, 0xa4, 0xad, 0x73, 0x2b, 0x99, 0x22, 0x19, 0x40, 0x3b, 0x54, 0xa4,
	0x02, 0x51, 0x0c, 0x06, 0x45, 0x4a, 0x01, 0xba, 0x60, 0xc5, 0x28, 0x1d, 0xab, 0xd8, 0x36, 0x46,
	0x99, 0x2f, 0xc1, 0xa3, 0x23, 0x3a, 0x4d, 0xd7, 0x18, 0x59, 0x9e, 0x8a, 0xe9, 0x1f, 0x78, 0x37,
	0x43, 0x91, 0x37, 0x9e, 0xca, 0x05, 0xca, 0xd3, 0xfe, 0x9a, 0x6c, 0x5c, 0xc8, 0xf5, 0x91, 0xcc,
	0xab, 0x91, 0xe8, 0x27, 0x80, 0x5c, 0xc8, 0x17, 0x19, 0x06, 0x7b, 0xe2, 0xc0, 0xdb, 0x35, 0x4b,
	0x04, 0x26, 0x42, 0xc9, 0x74, 0xbc, 0xd3, 0xef, 0xe4, 0xc9, 0x04, 0xdb, 0x2f, 0x78, 0x3e, 0x66,
	0x8f, 0xd1, 0x1a, 0xc9, 0x7f, 0xb0, 0xab, 0xa6, 0x11, 0xb7, 0x74, 0xb5, 0x9b, 0xc6, 0xf7, 0x87,
	0xaf, 0x20, 0x0a, 0x23, 0x68, 0x43, 0x0b, 0x97, 0x4c, 0xaa, 0x0b, 0x5f, 0x9b, 0x5f, 0x17, 0xbe,
	0xe1, 0x30, 0x6d, 0x90, 0x39, 0x74, 0xca, 0x87, 0x23, 0x1f, 0xab, 0xa4, 0xfa, 0x45, 0xfb, 0xbd,
	0x52, 0xfd, 0x72, 0x25, 0xda, 0xf8, 0x6e, 0x84, 0x6f, 0xd4, 0x63, 0xff, 0xf1, 0x1c, 0x00, 0x00,
	0xff, 0xff, 0xca, 0x35, 0xde, 0x67, 0x0f, 0x03, 0x00, 0x00,
}
